openapi: 3.0.0
info:
  title: The UNBlog API
  version: 1.0.0
  description: API for managing users and blogs on the UNBlog application

servers:
  - url: http://cs3103.cs.unb.ca:8032/

security:
  - BearerAuth: []


tags:
  - name: Authentication
    description: Operations for user authentication.
  - name: Users
    description: User profile management operations
  - name: Blogs
    description: Operations for managing blogs, its likes and comments (create, read, delete).

paths:
  /login:
    post:
      summary: AUthenticate and login user 
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: User Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        
        "401":
          description: Unauthorized
      deprecated: false

  /register:
    post:
      summary: Register and create a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        "201":
          description: User registration successful
        "400":
          description: Bad request
      security: []
      deprecated: false

  /users:
    get:
      summary: Get list of all users
      tags:
        - Users
      security: []
      responses:
        "200":
          description: Users fetched successfully

  /users/{userId}:
    get:
      summary: Get user details based on userId
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

      
    put:
      summary: Edit and update user details
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema: 
              type: object
              properties:
                username:
                  type: string
                email: 
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User details updated successfully
        "400":
          description: Bad request
      

  /blogs:
    get:
      summary: Retrieves a list of all created blogs
      tags:
        - Blogs
      security: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
      deprecated: false

    post:
      summary: Creates a new blog
      tags:
        - Blogs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: Blog created successfully
        "400":
          description: Bad request
      deprecated: false

  /blogs/{blogId}:
    get:
      summary: Retrieves a blog of with the given blogId
      tags:
        - Blogs
      security: []
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Blog fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      deprecated: false

    put:
      summary: Edits the contents of a blog
      tags:
        - Blogs
      security:
        - BearerAuth: []
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        "201":
          description: Blog edited successfully
        "400":
          description: Bad request
      deprecated: false

  /blogs/{blogId}/like:
    post:
      summary: Likes or unlikes the blog based on action property in payload
      tags:
        - Blogs
      security:
        - BearerAuth: []
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [like, unlike]
      responses:
        "201":
          description: Blog liked/unliked successfully
        "400":
          description: Bad request        
      deprecated: false

  /blogs/{blogId}/comment:
    get:
      summary: Get list of all comments of the blog
      tags:
        - Blogs
      security: []
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Comments fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

    post:
      summary: Add a comment in a blog
      tags:
        - Blogs
      security:
        - BearerAuth: []
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        "201":
          description: Commment added successfully
        "400":
          description: Bad request
        
      deprecated: false


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        password: 
          type: string
        email:
          type: string
    
    User:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time

    Blog:
      type: object
      properties:
        blogId:
          type: integer
        userId:
          type: integer
        username:
          type: string
        title:
          type: string
        content:
          type: string
        likes:
          type: integer
        createdAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        commentId:
          type: integer
        blogId:
          type: integer
        userId:
          type: integer
        content:
          type: string
        createdAt:
          type: string
          format: date-time