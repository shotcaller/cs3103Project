openapi: 3.0.0
info:
    title: blogAPI
    description: API for blog project, handles user, blog and comments management 
    version: 1.0.0

servers:
  - url: http://cs3103.cs.unb.ca:8034/
  
  
security:
  - BearerAuth: []

components:
    securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
      
    schemas:

        User:
          type: object
          properties:
              userid:
                type: integer
              userName:
                type: string
              email:
                type: string
              passwordHash:
                type: string
              createdAt:
                type: string
              profilePhoto:
                type: string

        Verification:
          type: object
          properties:
              userID:
                type: integer
              verificationHash:
                type: string
              verifiedAt:
                type: string

        Blog:
          type: object
          properties:
              blogID:
                type: integer
              userID:
               type: integer
              title:
                type: string
              content:
                type: string
              createdAt:
                type: string

        Comment:
          type: object
          properties:
              commentID:
                type: integer
              blogID:
                type: integer
              userID:
                type: integer
              content:
                type: string
              createdAt:
                type: string

paths:
    /auth/login:
        post:
            summary: Authenticate/login the user
            tags:
                - Authentication
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                password:
                                    type: string

            responses:
                "200":
                    description: Login succesful!
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string

                "401":
                    description: Unauthorized
            deprecated: false

    /users:

        # getAllUsers(): Retrieves a list of all users
        get:
            summary: Get users
            tags:
                - Users
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: List of all users
                    content: 
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                "400":
                    description: Request failed

        # addUser(): Adds a new user 
        post:
            summary: Register a new user
            tags:
                -   Users
                -   Authentication
            security: []
            deprecated: false
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                email:
                                    type: string
                                passwordHash:
                                    type: string
                                profilePictureURL:
                                    type: string
            responses:
                    "201":
                        description: User registered
    
    /users/{userID}:

        # getUser(): Retrieves user details based on username
        get:
            summary: Get the user's details using userID
            tags:
                - Users
            security:
                - BearerAuth: []
            parameters:
                -   name: userID
                    in: path
                    required: true
                    schema:
                        type: object
                        properties:
                            username:
                                type: string
            responses:
                "200":
                  description: User detailed gotten successfully
                  content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
        # editUser(): Updates any user details
        put:
            summary: Updates user details
            tags:
                -   Users
            security:
                -   BearerAuth: []
            parameters:
                -   name: userID
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                email:
                                    type: string
                                passwordHash:
                                    type: string 
                                profilePictureURL:
                                    type: string
            responses:
                "201":
                    description: User updated succesfully
                "400":
                    description: Bad request
                "404":
                    description: User not found

    /blogs:

        # getAllBlogs(): Retrives list of all blogs
        get:
            summary: Gets a list of all the blogs
            tags:
                -   Blogs
            security: []
            responses:
                "200":
                    description: Success!
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Blog'
                "404":
                    description: Blog not found
                "400":
                    description: Request failed
            deprecated: false

        # createBlog(): Creates blog
        post:
            summary: Create new blog
            security:
                -   BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                userId:
                                    type: integer
                                title:
                                    type: string
                                content:
                                    type: string
            responses:
                "201":
                    description: New blog created
    /blogs/{blogID}:
        get:
            summary: Gets a blog with the blogID
            tags:
                -   Blogs
            security: []
            parameters:
                -   name: blogID
                    in: path
                    required: true
                    schema:
                        type: array
                        items:
                            $ref: '#/components/schemas/Blog'
            responses:
                "200":
                    description: Blog found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Blog'
        put:
            summary: Edit a blog with the blogID
            security:
                -   BearerAuth: []
            tags:
                -   Blogs
            parameters:
                -   name: blogID
                    in: path
                    required: true
                    schema:
                        type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                content:
                                    type: string
            responses:
                "201":
                    description: Blog edited
                "404":
                    description: Blog not found
                "400":
                    description: Request failed
            deprecated: false

        # deleteBlog(): Deletes a blog
        delete:
            summary: Delete a blog
            security:
                -   BearerAuth: []
            tags:
                -   Blogs
            parameters:
                -   name: blogID
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                "200":
                    description: Blog deleted
                "404":
                    description: Blog not found
                "400":
                    description: Request failed
            deprecated: false
    /blogs/{blogId}/like:

        # likeBlog()/unlikeBlog(): Adds or removes like from blog
        post:
            summary: Likes or unlikes the blog
            tags:
                -   Blogs
            security:
                -   BearerAuth: []
            parameters:
                -   name: blogId
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                action:
                                    type: string
                                    enum: [like, unlike]
            responses:
                "201":
                    description: Blog liked/unliked
                "400":
                    description: Request failed
                "404":
                    description: Blog not found
            deprecated: false

    /blogs/{blogId}/comment:

        # getCommentsByBlog(): Get list of all comments for a specific blog
        get:
            summary: Get list of all comments for the blog
            tags:
                -   Blogs
                -   Comments
            security: []
            parameters:
                -   name: blogId
                    in: path
                    required: true
                    schema:
                        type: integer
            responses:
                "200":
                    description: Comments gotten
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Comment'
                "400":
                    description: Request failed
                "404":
                    description: Comment not found
            deprecated: false

        #addComment(): Adds a comment to a blog
        post:
            summary: Add comment to blog
            tags:
                -   Blogs
                -   Comments
            security: []
            parameters:
                -   name: blogId
                    in: path
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
            responses:
                "201":
                    description: Comment added
            deprecated: false
            
    /blogs/{blogId}/comments/{commentId}:

        #deletecomment(): Removes a comment from the blog
        delete:
            summary: Deletes a comment
            tags:
                -   Blogs
                -   Comments
            security:
                -   BearerAuth: []
            parameters:
                -   name: blogId
                    in: path
                    required: true
                    schema:
                        type: string
                -   name: commentId
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                "200":
                  description: Comment deleted
                "400":
                    description: Request Failed
                "404":
                    description: Comment not found
            deprecated: false

